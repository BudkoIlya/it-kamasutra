{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","assets/img/user.png","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setStatus","useEffect","autoFocus","onBlur","onChange","target","onDoubleClick","ProfileDataFormRedux","reduxForm","form","isOwner","handleSubmit","profile","onSubmit","type","CreateField","Input","Textarea","entries","contacts","map","contact","idx","String","ProfileData","handleToggleMode","className","classes","descriptionBlock","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","Contacts","store","isFetching","usersPage","savePhoto","saveProfile","alt","src","photos","large","userPhoto","mainPhoto","files","initialValues","formData","then","catch","error","console","Post","message","id","likeCounts","item","like","maxLength","requiredMaxLength","MyPosts","React","memo","posts","addPost","postsElements","p","postBlock","AddMessagePostRedux","newPostBody","required","MyPostsContainer","profilePage","actions","addPostActionCreator","Profile","props","ProfileContainer","refreshProfile","match","getUsersProfile","authorizedUserId","userId","params","Number","this","prevProps","Component","compose","getUsersProfileThunk","setStatusThunk","updateStatusThunk","savePhotoThunk","saveProfileThunk","withRouter"],"mappings":"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","file":"static/js/4.831c3ad2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport function withAuthRedirect(\r\n  WrappedComponent: React.FC | React.ComponentType\r\n) {\r\n  const RedirectComponent = ({ isAuth }: MapStateToPropsType) => {\r\n    if (!isAuth) return <Redirect to=\"/login\" />;\r\n    return <WrappedComponent />;\r\n  };\r\n  return connect<MapStateToPropsType, object, object, AppStateType>(\r\n    mapStateToPropsForRedirect\r\n  )(RedirectComponent);\r\n}\r\n\r\n// types\r\ninterface MapStateToPropsType {\r\n  isAuth: boolean;\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/user.fedbf887.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__25vGT\",\"mainPhoto\":\"ProfileInfo_mainPhoto__UDhfi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__xzf-N\",\"posts\":\"MyPosts_posts__3QeSo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__23Xka\",\"message\":\"Post_message__wE2sx\",\"like\":\"Post_like__2mSqY\"};","import React, { useState, useEffect, ChangeEvent } from 'react';\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = ({\r\n  status,\r\n  updateStatus,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [newStatus, setStatus] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setStatus(status);\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(newStatus);\r\n  };\r\n  const setValueStatus = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(target.value);\r\n  };\r\n  return (\r\n    <>\r\n      {!editMode ? (\r\n        <div>\r\n          <b>Status:</b>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {status || 'добавить статус'}\r\n          </span>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <input\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            value={newStatus}\r\n            onChange={setValueStatus}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n// Types\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { ProfileType } from '../../../../types/types';\r\nimport {\r\n  CreateField,\r\n  GetStringKeys,\r\n  Input,\r\n  Textarea,\r\n} from '../../../common/FormsControls/FormsControls';\r\n\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ isOwner, handleSubmit, profile }) => (\r\n  <form onSubmit={handleSubmit}>\r\n    {isOwner && (\r\n      <div>\r\n        <button type=\"submit\">Save</button>\r\n      </div>\r\n    )}\r\n    <div>\r\n      <b>Full name </b>:{' '}\r\n      {CreateField<LoginFormValuesTypeKeys>('Full name', 'fullName', [], Input)}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>:{' '}\r\n      {CreateField<LoginFormValuesTypeKeys>('', 'lookingForAJob', [], Input, {\r\n        type: 'checkbox',\r\n      })}\r\n    </div>\r\n    <div>\r\n      <b>My Professional skills</b>\r\n      {CreateField<LoginFormValuesTypeKeys>(\r\n        'My Professional skills',\r\n        'lookingForAJobDescription',\r\n        [],\r\n        Textarea\r\n      )}\r\n    </div>\r\n    <div>\r\n      <b>About me</b>:{' '}\r\n      {CreateField<LoginFormValuesTypeKeys>(\r\n        'About me',\r\n        'aboutMe',\r\n        [],\r\n        Textarea\r\n      )}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>:\r\n      {Object.entries(profile.contacts).map((contact, idx) => (\r\n        <div key={String(idx)}>\r\n          {/* если писать имя через точку это указывает вложенность объекта для redux form */}\r\n          {/* todo: create some solution for embedded objects `contacts.${contact[0]}` */}\r\n          {contact[0]}:{' '}\r\n          {CreateField('Enter contact', `contacts.${contact[0]}`, [], Input)}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </form>\r\n);\r\n\r\nconst ProfileDataFormRedux = reduxForm<ProfileType, PropsType>({\r\n  form: 'profileEdit',\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedux;\r\n\r\n// Types\r\ntype PropsType = {\r\n  isOwner: boolean;\r\n  profile: ProfileType;\r\n};\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<ProfileType>;\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from '../../../common/preloader/preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../../assets/img/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ProfileType } from '../../../../types/types';\r\nimport { AppStateType } from '../../../../redux/redux-store';\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsT & MapStateToPropsT> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isFetching,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  const handlePhotoSelected = ({ target }: ChangeEvent<HTMLInputElement>) =>\r\n    target.files?.length && savePhoto(target.files[0]);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    // todo: remove then\r\n    saveProfile(formData)\r\n      .then(() => {\r\n        setEditMode(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!profile ? (\r\n        <Preloader isFetching={isFetching} />\r\n      ) : (\r\n        <div className={classes.descriptionBlock}>\r\n          <img\r\n            alt=\"profileImg\"\r\n            src={profile.photos.large || userPhoto}\r\n            className={classes.mainPhoto}\r\n          />\r\n          {isOwner && <input type=\"file\" onChange={handlePhotoSelected} />}\r\n          {/* initialValues - устанавливает значения в поля автоматически если совпадают имена свойст и полей */}\r\n          {editMode ? (\r\n            <ProfileDataForm\r\n              initialValues={profile}\r\n              profile={profile}\r\n              onSubmit={onSubmit}\r\n              isOwner={isOwner}\r\n            />\r\n          ) : (\r\n            <ProfileData\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n              handleToggleMode={() => setEditMode(true)}\r\n            />\r\n          )}\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataTypes> = ({\r\n  profile,\r\n  isOwner,\r\n  handleToggleMode,\r\n}) => (\r\n  <div className={classes.descriptionBlock}>\r\n    {isOwner && (\r\n      <div>\r\n        <button type=\"button\" onClick={handleToggleMode}>\r\n          Edit\r\n        </button>\r\n      </div>\r\n    )}\r\n    <div>\r\n      <b>Full name </b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n    </div>\r\n    {profile.lookingForAJob && (\r\n      <div>\r\n        <b>My Professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n    )}\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>:\r\n      {Object.entries(profile.contacts).map((contact, idx) => (\r\n        <Contacts\r\n          key={String(idx)}\r\n          contactTitle={contact[0]}\r\n          value={contact[1]}\r\n        />\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Contacts: React.FC<ContactsType> = ({ contactTitle, value }) => (\r\n  <div>\r\n    {contactTitle}: {value}\r\n  </div>\r\n);\r\nconst MapStateToProps = (store: AppStateType) => ({\r\n  isFetching: store.usersPage.isFetching,\r\n});\r\n\r\nexport default connect(MapStateToProps)(ProfileInfo);\r\n\r\n// Types\r\nexport type ProfileInfoPropsT = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (photo: File) => void;\r\n  saveProfile: (newProfileData: ProfileType) => Promise<void>;\r\n};\r\n\r\ntype MapStateToPropsT = {\r\n  isFetching: boolean;\r\n};\r\n\r\ntype ProfileDataTypes = {\r\n  isOwner: boolean;\r\n  profile: ProfileType;\r\n  handleToggleMode: () => void;\r\n};\r\n\r\ntype ContactsType = {\r\n  contactTitle: string;\r\n  value: string;\r\n};\r\n","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport { PostsType } from '../../../../types/types';\r\n\r\nconst Post: React.FC<PostsType> = ({ message, id, likeCounts }) => (\r\n  <div className={classes.item}>\r\n    <div className={classes.message}>\r\n      <div>\r\n        <img\r\n          src=\"https://i.pinimg.com/originals/2d/0f/50/2d0f50e8e4f6b233c7cf70b4bd36f89c.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <p>{message}</p>\r\n    </div>\r\n    <span id={String(id)} className={classes.like}>\r\n      {`Likes : ${likeCounts}`}\r\n    </span>\r\n  </div>\r\n);\r\nexport default Post;\r\n","import React from 'react';\r\nimport { reduxForm, InjectedFormProps } from 'redux-form';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {\r\n  required,\r\n  requiredMaxLength,\r\n} from '../../../utils/validators/validators';\r\nimport {\r\n  CreateField,\r\n  GetStringKeys,\r\n  Textarea,\r\n} from '../../common/FormsControls/FormsControls';\r\nimport { PostsType } from '../../../types/types';\r\n\r\nconst maxLength = requiredMaxLength(30);\r\n\r\n// оптимизация приложения React.memo(внутри реализован аналог классового метода ShouldComponentUpdate)\r\nconst MyPosts: React.FC<PropsType> = React.memo(({ posts, addPost }) => {\r\n  const postsElements = posts.map((p) => (\r\n    <Post message={p.message} likeCounts={p.likeCounts} key={p.id} id={p.id} />\r\n  ));\r\n\r\n  const onAddPost = (formData: LoginFormValuesType) => {\r\n    addPost(formData.newPostBody);\r\n  };\r\n  return (\r\n    <div className={classes.postBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        {/* onSubmit={onAddPost} - автоматически прокидывает этот сабмит в handleSubmit(обязательно имя onSubmit) */}\r\n        <AddMessagePostRedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={classes.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddMessagePost: React.FC<InjectedFormProps<LoginFormValuesType>> = ({\r\n  handleSubmit,\r\n}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <div>\r\n      {CreateField<LoginFormValuesTypeKeys>(\r\n        'add post',\r\n        'newPostBody',\r\n        [required, maxLength],\r\n        Textarea\r\n      )}\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">Add post</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nconst AddMessagePostRedux = reduxForm<LoginFormValuesType>({ form: 'addPost' })(\r\n  AddMessagePost\r\n);\r\n\r\nexport default MyPosts;\r\n\r\n// types\r\ntype LoginFormValuesType = {\r\n  newPostBody: PostsType;\r\n};\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport type MapStateToPropsType = {\r\n  posts: Array<PostsType>;\r\n};\r\nexport type MapDispatchToProps = {\r\n  addPost: (newPostBody: PostsType) => void;\r\n};\r\ntype PropsType = MapStateToPropsType & MapDispatchToProps;\r\n","import { connect } from 'react-redux';\r\nimport MyPosts, { MapDispatchToProps, MapStateToPropsType } from './MyPosts';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\n// Передаём часть state для MyPostsContainer в props'ах\r\nconst mapStateToProps = ({\r\n  profilePage,\r\n}: Pick<AppStateType, 'profilePage'>) => ({\r\n  posts: profilePage.posts,\r\n});\r\n// Создаётся связь с компонентой MyPosts, создавая новую компоненту(контейнер) содержащую store, которая рендерит MyPosts\r\nconst MyPostsContainer = connect<\r\n  MapStateToPropsType,\r\n  MapDispatchToProps,\r\n  object,\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator,\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo, {\r\n  ProfileInfoPropsT,\r\n} from './MyPosts/ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile: React.FC<ProfileInfoPropsT> = (props) => (\r\n  <div>\r\n    <ProfileInfo {...props} />\r\n    <MyPostsContainer />\r\n  </div>\r\n);\r\nexport default Profile;\r\n","import React, { ComponentType, FC } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport Profile from './Profile';\r\nimport {\r\n  getUsersProfileThunk,\r\n  savePhotoThunk,\r\n  setStatusThunk,\r\n  updateStatusThunk,\r\n  saveProfileThunk,\r\n} from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    // userId прокидывается в params с помощью <NavLink to={`/profile/${user.id}`}> в User\r\n    const {\r\n      match: {\r\n        params: { userId },\r\n      },\r\n    } = this.props;\r\n    const prevUserId = prevProps.match.params.userId;\r\n    if (prevUserId !== userId) {\r\n      // debugger; - проверка мой ли выбран профиль либо чей-то другой, при загрузке компонеты должен отображаться мой профиль\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  refreshProfile = () => {\r\n    const { match, getUsersProfile, setStatus, authorizedUserId } = this.props;\r\n    let { userId } = match.params; // userId произвольное название выставляется в App.ts в <Route path = ''/> приходит ввиде СТРОКИ\r\n    if (!userId) userId = String(authorizedUserId); // если нет в url значения id поумолчанию отображаем 2(в дальнейшем изменим на сой профиль )\r\n    // Авторизируемся и получаем данные этого пользователя в state\r\n    // todo: сервак требует числа, в парамсах приходит строка <Route path='/profile/:userId?'/>\r\n    getUsersProfile(Number(userId));\r\n    setStatus(Number(userId));\r\n  };\r\n\r\n  render() {\r\n    const { profile, status, updateStatus, savePhoto, match, saveProfile } =\r\n      this.props;\r\n    return (\r\n      <Profile\r\n        savePhoto={savePhoto}\r\n        isOwner={!match.params.userId} // userId - если есть, то значит я не владелец страницы\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        saveProfile={saveProfile}\r\n      />\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({\r\n  profilePage,\r\n  auth,\r\n}: AppStateType): MapStateToPropsT => ({\r\n  profile: profilePage.profile,\r\n  status: profilePage.status,\r\n  authorizedUserId: auth.userId,\r\n  isAuth: auth.isAuth,\r\n});\r\nexport default compose<FC | ComponentType>(\r\n  withAuthRedirect, // hoc для ридеректа\r\n  connect(mapStateToProps, {\r\n    getUsersProfile: getUsersProfileThunk,\r\n    setStatus: setStatusThunk,\r\n    updateStatus: updateStatusThunk,\r\n    savePhoto: savePhotoThunk,\r\n    saveProfile: saveProfileThunk,\r\n  }),\r\n  withRouter\r\n)(ProfileContainer);\r\n\r\n// types\r\ntype MapStateToPropsT = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  authorizedUserId: number | null;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispatchToPropsT = {\r\n  getUsersProfile: (userId: number) => void;\r\n  setStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (photo: File) => void;\r\n  saveProfile: (newProfileData: ProfileType) => Promise<void>;\r\n};\r\ntype MatchParams = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = MapStateToPropsT &\r\n  MapDispatchToPropsT &\r\n  RouteComponentProps<MatchParams>;\r\n"],"sourceRoot":""}