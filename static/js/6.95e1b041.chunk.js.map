{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","assets/img/user.png","components/Users/Users.module.css","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","module","exports","Paginator","totalItemsCount","pageSize","isFetching","filter","onChange","disabled","defaultCurrent","total","showSizeChanger","page","User","user","dispatch","useDispatch","followingInProgress","useSelector","getFollowingInProgress","className","classes","users","exact","id","src","photos","small","userPhoto","photo","alt","followed","type","some","onClick","userId","unFollowThunkCreator","followThunkCreator","name","Forms","term","isFriends","setQuery","onFilterChanged","enableReinitialize","initialValues","searchUsers","friendSelector","onSubmit","actions","placeholder","component","value","htmlType","resetForm","values","resetSearchData","Users","currentPage","filterGetUsers","totalUsersCount","getTotalUsersCount","getUsers","getUsersThunkCreator","useQueryParams","NumberParam","StringParam","query","useEffect","queryTerm","queryIsFriends","map","UserPageAuthRedirect","getIsFetching","getTerm","getIsFriends","getCurrentPage","getPageSize"],"mappings":"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","file":"static/js/6.95e1b041.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { AppStateType } from '../../redux/redux-store';\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function withAuthRedirect(\n  WrappedComponent: React.FC | React.ComponentType\n) {\n  const RedirectComponent = ({ isAuth }: MapStateToPropsType) => {\n    if (!isAuth) return <Redirect to=\"/login\" />;\n    return <WrappedComponent />;\n  };\n  return connect<MapStateToPropsType, object, object, AppStateType>(\n    mapStateToPropsForRedirect\n  )(RedirectComponent);\n}\n\n// types\ninterface MapStateToPropsType {\n  isAuth: boolean;\n}\n","export default __webpack_public_path__ + \"static/media/user.fedbf887.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__8VkPo\",\"user\":\"Users_user__AHPdZ\",\"photo\":\"Users_photo__2dYHs\"};","import React from 'react';\nimport { Pagination } from 'antd';\n\ntype PropsType = {\n  totalItemsCount: number;\n  pageSize: number;\n  currentPage: number;\n  isFetching: boolean;\n  filter?: any;\n  onChange: (...args: any[]) => void;\n};\n\nexport const Paginator: React.FC<PropsType> = ({\n  totalItemsCount,\n  pageSize,\n  isFetching,\n  filter,\n  onChange,\n}) => {\n  return (\n    <div>\n      <Pagination\n        disabled={isFetching}\n        defaultCurrent={1}\n        total={totalItemsCount}\n        showSizeChanger={false}\n        pageSize={pageSize}\n        onChange={(page) => onChange(page, filter)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classes from './Users.module.css';\nimport userPhoto from '../../assets/img/user.png';\nimport { UserType } from '../../types/types';\nimport {\n  followThunkCreator,\n  unFollowThunkCreator,\n} from '../../redux/users-reducer';\nimport { getFollowingInProgress } from '../../redux/selectors';\n\n// types\ntype PropsType = {\n  user: UserType;\n};\n\nexport const User: React.FC<PropsType> = ({ user }) => {\n  const dispatch = useDispatch();\n  const follow = (userId: number) => dispatch(followThunkCreator(userId));\n  const unFollow = (userId: number) => dispatch(unFollowThunkCreator(userId));\n  const followingInProgress = useSelector(getFollowingInProgress);\n  return (\n    <div key={user.id} className={classes.users}>\n      <div>\n        <div>\n          {/* todo: Очень важное замечание - здесь в путь прокидывается id которое потом достается с помощью params в ProfileContainer */}\n          <NavLink exact to={`/profile/${user.id}`}>\n            <img\n              src={user.photos.small != null ? user.photos.small : userPhoto}\n              className={classes.photo}\n              alt=\"preloader\"\n            />\n          </NavLink>\n        </div>\n        {user.followed ? (\n          // Если подписан\n          <button\n            type=\"button\"\n            // some возвращает true либо false\n            disabled={followingInProgress.some(\n              (id) => id === user.id // вернёт true только в том случае если isFetching = true,\n              // isFetching передаётся при клике на подписку/отписку\n            )}\n            onClick={() => {\n              unFollow(user.id);\n            }}\n          >\n            Unfollow\n          </button>\n        ) : (\n          // Если не подписан\n          <button\n            type=\"button\"\n            disabled={followingInProgress.some((id) => id === user.id)}\n            onClick={() => {\n              follow(user.id);\n            }}\n          >\n            Follow\n          </button>\n        )}\n      </div>\n      <div>\n        <p>{user.name}</p>\n        <p>user.status</p>\n        <p>user.location.city</p>\n        <p>user.location.country</p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik';\nimport { SetQuery } from 'use-query-params';\nimport { Button } from 'antd';\nimport { FilterGetUsersT } from '../../redux/users-reducer';\n\nexport const Forms: React.FC<Props> = ({\n  term,\n  isFriends,\n  isFetching,\n  setQuery,\n  onFilterChanged,\n}) => {\n  const searchUsersByFilter = ({\n    searchUsers,\n    friendSelector,\n  }: FormikValues) => {\n    // при поиске c term всегда должна сбрасываться страница на первую\n    onFilterChanged(1, { term: searchUsers, isFriends: friendSelector });\n  };\n  const resetSearchData = (actions: FormikProps<FiledValues>) => {\n    onFilterChanged(1, { term: '', isFriends: 'all' });\n    // todo: handleReset - сбрасываем на initialValues, тоесть searchUsers = '' и friendSelector = 'all'\n    // actions.handleReset();\n    // todo: resetForm - либо прописываем вручную нужные значения\n    actions.resetForm({\n      values: {\n        searchUsers: '',\n        friendSelector: 'all',\n      },\n    });\n    setQuery({\n      page: 1,\n      isFriends: 'all',\n      term: '',\n    });\n  };\n\n  return (\n    <Formik\n      enableReinitialize // Control whether Formik should reset the form if initialValues changes\n      initialValues={{ searchUsers: term, friendSelector: isFriends }}\n      onSubmit={searchUsersByFilter}\n    >\n      {(actions) => (\n        <Form>\n          <Field type=\"text\" name=\"searchUsers\" placeholder=\"Search\" />\n          <Field component=\"select\" name=\"friendSelector\">\n            <option value=\"all\">All</option>\n            <option value=\"true\">Only followed</option>\n            <option value=\"false\">Only unfollowed</option>\n          </Field>\n          <Button htmlType=\"submit\" disabled={isFetching}>\n            Search\n          </Button>\n          <Button\n            name=\"reset\"\n            onClick={() => resetSearchData(actions)}\n            disabled={isFetching}\n          >\n            Reset\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\n// Types\ntype Props = {\n  term: FilterGetUsersT['term'];\n  isFriends: FilterGetUsersT['isFriends'];\n  isFetching: boolean;\n  setQuery: SetQuery<any>;\n  onFilterChanged: (currentPage: number, filter: FilterGetUsersT) => void;\n};\n\ntype FiledValues = {\n  searchUsers: FilterGetUsersT['term'];\n  friendSelector: FilterGetUsersT['isFriends'];\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NumberParam, StringParam, useQueryParams } from 'use-query-params';\nimport { Paginator } from '../common/Paginator/Paginator';\nimport { User } from './User';\nimport {\n  FilterGetUsersT,\n  getUsersThunkCreator,\n} from '../../redux/users-reducer';\nimport { getTotalUsersCount, getUsers } from '../../redux/selectors';\nimport { Forms } from './UsersSearchForm';\n\ntype Props = {\n  pageSize: number;\n  currentPage: number;\n  isFetching: boolean;\n  filterGetUsers: FilterGetUsersT;\n};\n\nexport const Users: React.FC<Props> = ({\n  currentPage,\n  pageSize,\n  isFetching,\n  filterGetUsers: { isFriends, term },\n}) => {\n  // store\n  const totalUsersCount = useSelector(getTotalUsersCount);\n  const users = useSelector(getUsers);\n  // dispatch\n  const dispatch = useDispatch();\n  const onFilterChanged = (page: number, filter: FilterGetUsersT) => {\n    dispatch(getUsersThunkCreator(page, pageSize, filter));\n  };\n  const [query, setQuery] = useQueryParams({\n    page: NumberParam,\n    isFriends: StringParam,\n    term: StringParam,\n  });\n  useEffect(() => {\n    const queryTerm = query.term ? query.term : '';\n    const queryIsFriends = query.isFriends\n      ? (query.isFriends as FilterGetUsersT['isFriends'])\n      : 'all';\n    dispatch(\n      getUsersThunkCreator(query.page as number, pageSize, {\n        term: queryTerm,\n        isFriends: queryIsFriends,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setQuery({\n      page: currentPage,\n      isFriends,\n      term,\n    });\n  }, [term, currentPage, isFriends, setQuery]);\n\n  return (\n    <div>\n      <Forms\n        setQuery={setQuery}\n        term={term}\n        isFriends={isFriends}\n        isFetching={isFetching}\n        onFilterChanged={onFilterChanged}\n      />\n      <Paginator\n        filter={{ term, isFriends }}\n        isFetching={isFetching}\n        currentPage={currentPage}\n        onChange={onFilterChanged}\n        totalItemsCount={totalUsersCount}\n        pageSize={pageSize}\n      />\n      {users.map((user) => (\n        <User key={user.id} user={user} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Users } from './Users';\nimport Preloader from '../common/preloader/preloader';\nimport {\n  getCurrentPage,\n  getIsFetching,\n  getIsFriends,\n  getPageSize,\n  getTerm,\n} from '../../redux/selectors';\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\n\nconst UsersPage = () => {\n  const isFetching = useSelector(getIsFetching);\n  const term = useSelector(getTerm);\n  const isFriends = useSelector(getIsFriends);\n  const currentPage = useSelector(getCurrentPage);\n  const pageSize = useSelector(getPageSize);\n  return (\n    <>\n      <Preloader isFetching={isFetching} />\n      <Users\n        filterGetUsers={{ term, isFriends }}\n        pageSize={pageSize}\n        currentPage={currentPage}\n        isFetching={isFetching}\n      />\n    </>\n  );\n};\n\nexport const UserPageAuthRedirect = withAuthRedirect(UsersPage);\n"],"sourceRoot":""}