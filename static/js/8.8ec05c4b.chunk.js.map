{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ChatPage","Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","prevMessages","JSON","parse","data","style","height","overflowY","map","m","i","Message","message","src","photo","width","border","padding","marginRight","alt","userName","setMessage","readyStatus","setReadyStatus","openHandler","sendMessage","a","send","enableReinitialize","onSubmit","initialValues","chat","display","alignItems","marginTop","resize","as","name","placeholder","onChange","currentTarget","value","disabled","marginLeft","htmlType"],"mappings":"kPAaaA,EAAqB,kBAChC,8BACE,cAACC,EAAD,OAIEA,EAAiB,WACrB,MAAkCC,mBAA2B,MAA7D,mBAAOC,EAAP,KAAkBC,EAAlB,KAsBA,OArBAC,qBAAU,WACR,IAAIC,EACEC,EAAe,WACnBC,QAAQC,IAAI,YACZC,WAAWC,EAAe,MAE5B,SAASA,IAAiB,IAAD,IACrB,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,SACJP,EAAK,IAAIQ,UACP,iEAECC,iBAAiB,QAASR,GAC7BH,EAAaE,GAGf,OADAK,IACO,WACLL,EAAGM,oBAAoB,QAASL,GAChCD,EAAGO,WAEJ,IAED,gCACE,cAACG,EAAD,CAAUb,UAAWA,IACrB,cAACc,EAAD,CAAgBd,UAAWA,QAK3Ba,EAAsD,SAAC,GAAmB,IAAjBb,EAAgB,EAAhBA,UAC7D,EAAgCD,mBAA4B,IAA5D,mBAAOgB,EAAP,KAAiBC,EAAjB,KAUA,OATAd,qBAAU,WACR,IAAMe,EAAiB,SAACC,GACtBF,GAAY,SAACG,GAAD,4BAAsBA,GAAtB,YAAuCC,KAAKC,MAAMH,EAAEI,YAGlE,OADS,OAATtB,QAAS,IAATA,KAAWY,iBAAiB,UAAWK,GAChC,WACI,OAATjB,QAAS,IAATA,KAAWS,oBAAoB,UAAWQ,MAE3C,CAACjB,IAEF,qBAAKuB,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAA1C,SACGV,EAASW,KAAI,SAACC,EAAoBC,GAArB,OAEZ,aADA,CACCC,EAAD,CAASC,QAASH,GAAQC,SAK5BC,EAAkD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACtD,gCACE,qBACEC,IAAKD,EAAQE,MACbT,MAAO,CACLU,MAAO,OACPC,OAAQ,iBACRC,QAAS,MACTC,YAAa,OAEfC,IAAI,QAEN,4BAAIP,EAAQQ,WACZ,8BAAMR,EAAQA,UACd,2BAGEhB,EAA4D,SAAC,GAE5D,IADLd,EACI,EADJA,UAEA,EAA8BD,mBAAS,IAAvC,mBAAO+B,EAAP,KAAgBS,EAAhB,KACA,EAAsCxC,mBACpC,WADF,mBAAOyC,EAAP,KAAoBC,EAApB,KAGAvC,qBAAU,WACR,IAAMwC,EAAc,WAClBD,EAAe,UAGjB,OADS,OAATzC,QAAS,IAATA,KAAWY,iBAAiB,OAAQ8B,GAC7B,WACI,OAAT1C,QAAS,IAATA,KAAWS,oBAAoB,OAAQiC,MAExC,CAAC1C,IACJ,IAAM2C,EAAW,uCAAG,sBAAAC,EAAA,yDACbd,EADa,wEAEZ9B,QAFY,IAEZA,OAFY,EAEZA,EAAW6C,KAAKf,GAFJ,OAGlBS,EAAW,IAHO,2CAAH,qDAKjB,OACE,8BACE,cAAC,IAAD,CACEO,oBAAkB,EAClBC,SAAUJ,EACVK,cAAe,CAAEC,KAAMnB,GAHzB,SAKG,kBACC,eAAC,IAAD,CACEP,MAAO,CAAE2B,QAAS,OAAQC,WAAY,SAAUC,UAAW,QAD7D,UAGE,cAAC,IAAD,CACE7B,MAAO,CAAE8B,OAAQ,QACjBC,GAAG,WACHC,KAAK,OACLC,YAAY,eACZC,SAAU,SAACvC,GAAD,OACRqB,EAAWrB,EAAEwC,cAAcC,UAG/B,cAAC,IAAD,CACEC,UAAW5D,GAA6B,UAAhBwC,EACxBjB,MAAO,CAAEsC,WAAY,QACrBC,SAAS,SAHX","file":"static/js/8.8ec05c4b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button } from 'antd';\nimport { Field, Form, Formik } from 'formik';\n\n// const WS = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n\nexport type ChatMessageType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n};\n\nexport const ChatPage: React.FC = () => (\n  <div>\n    <Chat />\n  </div>\n);\n\nconst Chat: React.FC = () => {\n  const [wsChannel, setWsChannel] = useState<WebSocket | null>(null);\n  useEffect(() => {\n    let ws: WebSocket;\n    const closeHandler = () => {\n      console.log('CLOSE WS');\n      setTimeout(createChannel, 3000);\n    };\n    function createChannel() {\n      ws?.removeEventListener('close', closeHandler);\n      ws?.close();\n      ws = new WebSocket(\n        'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n      );\n      ws.addEventListener('close', closeHandler);\n      setWsChannel(ws);\n    }\n    createChannel();\n    return () => {\n      ws.removeEventListener('close', closeHandler);\n      ws.close();\n    };\n  }, []);\n  return (\n    <div>\n      <Messages wsChannel={wsChannel} />\n      <AddMessageForm wsChannel={wsChannel} />\n    </div>\n  );\n};\n\nconst Messages: React.FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\n  const [messages, setMessages] = useState<ChatMessageType[]>([]);\n  useEffect(() => {\n    const messageHandler = (e: MessageEvent) => {\n      setMessages((prevMessages) => [...prevMessages, ...JSON.parse(e.data)]);\n    };\n    wsChannel?.addEventListener('message', messageHandler);\n    return () => {\n      wsChannel?.removeEventListener('message', messageHandler);\n    };\n  }, [wsChannel]);\n  return (\n    <div style={{ height: '400px', overflowY: 'auto' }}>\n      {messages.map((m: ChatMessageType, i) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <Message message={m} key={i} />\n      ))}\n    </div>\n  );\n};\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => (\n  <div>\n    <img\n      src={message.photo}\n      style={{\n        width: '50px',\n        border: '1px solid grey',\n        padding: '5px',\n        marginRight: '5px',\n      }}\n      alt=\"img\"\n    />\n    <b>{message.userName}</b>\n    <div>{message.message}</div>\n    <hr />\n  </div>\n);\nconst AddMessageForm: React.FC<{ wsChannel: WebSocket | null }> = ({\n  wsChannel,\n}) => {\n  const [message, setMessage] = useState('');\n  const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>(\n    'pending'\n  );\n  useEffect(() => {\n    const openHandler = () => {\n      setReadyStatus('ready');\n    };\n    wsChannel?.addEventListener('open', openHandler);\n    return () => {\n      wsChannel?.removeEventListener('open', openHandler);\n    };\n  }, [wsChannel]);\n  const sendMessage = async () => {\n    if (!message) return;\n    await wsChannel?.send(message);\n    setMessage('');\n  };\n  return (\n    <div>\n      <Formik\n        enableReinitialize\n        onSubmit={sendMessage}\n        initialValues={{ chat: message }}\n      >\n        {() => (\n          <Form\n            style={{ display: 'flex', alignItems: 'center', marginTop: '10px' }}\n          >\n            <Field\n              style={{ resize: 'none' }}\n              as=\"textarea\"\n              name=\"chat\"\n              placeholder=\"Send message\"\n              onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                setMessage(e.currentTarget.value)\n              }\n            />\n            <Button\n              disabled={!wsChannel && readyStatus === 'ready'}\n              style={{ marginLeft: '10px' }}\n              htmlType=\"submit\"\n            >\n              Send\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n"],"sourceRoot":""}