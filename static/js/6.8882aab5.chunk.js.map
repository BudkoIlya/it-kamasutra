{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","assets/img/user.png","components/Users/Users.module.css","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","module","exports","Paginator","totalItemsCount","pageSize","isFetching","filter","onChange","disabled","defaultCurrent","total","showSizeChanger","page","User","user","dispatch","useDispatch","followingInProgress","useSelector","getFollowingInProgress","className","classes","users","exact","id","src","photos","small","userPhoto","photo","alt","followed","type","some","onClick","userId","unFollowThunkCreator","followThunkCreator","name","Forms","term","isFriends","setQuery","onFilterChanged","enableReinitialize","initialValues","searchUsers","friendSelector","onSubmit","actions","placeholder","component","value","htmlType","resetForm","values","resetSearchData","Users","currentPage","filterGetUsers","totalUsersCount","getTotalUsersCount","getUsers","getUsersThunkCreator","useQueryParams","NumberParam","StringParam","query","useEffect","queryTerm","queryIsFriends","map","UserPageAuthRedirect","getIsFetching","getTerm","getIsFriends","getCurrentPage","getPageSize"],"mappings":"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","file":"static/js/6.8882aab5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport function withAuthRedirect(\r\n  WrappedComponent: React.FC | React.ComponentType\r\n) {\r\n  const RedirectComponent = ({ isAuth }: MapStateToPropsType) => {\r\n    if (!isAuth) return <Redirect to=\"/login\" />;\r\n    return <WrappedComponent />;\r\n  };\r\n  return connect<MapStateToPropsType, object, object, AppStateType>(\r\n    mapStateToPropsForRedirect\r\n  )(RedirectComponent);\r\n}\r\n\r\n// types\r\ninterface MapStateToPropsType {\r\n  isAuth: boolean;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user.fedbf887.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2dW9y\",\"user\":\"Users_user__1moQy\",\"photo\":\"Users_photo__3MBlC\"};","import React from 'react';\r\nimport { Pagination } from 'antd';\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number;\r\n  pageSize: number;\r\n  currentPage: number;\r\n  isFetching: boolean;\r\n  filter?: any;\r\n  onChange: (...args: any[]) => void;\r\n};\r\n\r\nexport const Paginator: React.FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  isFetching,\r\n  filter,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Pagination\r\n        disabled={isFetching}\r\n        defaultCurrent={1}\r\n        total={totalItemsCount}\r\n        showSizeChanger={false}\r\n        pageSize={pageSize}\r\n        onChange={(page) => onChange(page, filter)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport classes from './Users.module.css';\r\nimport userPhoto from '../../assets/img/user.png';\r\nimport { UserType } from '../../types/types';\r\nimport {\r\n  followThunkCreator,\r\n  unFollowThunkCreator,\r\n} from '../../redux/users-reducer';\r\nimport { getFollowingInProgress } from '../../redux/selectors';\r\n\r\n// types\r\ntype PropsType = {\r\n  user: UserType;\r\n};\r\n\r\nexport const User: React.FC<PropsType> = ({ user }) => {\r\n  const dispatch = useDispatch();\r\n  const follow = (userId: number) => dispatch(followThunkCreator(userId));\r\n  const unFollow = (userId: number) => dispatch(unFollowThunkCreator(userId));\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n  return (\r\n    <div key={user.id} className={classes.users}>\r\n      <div>\r\n        <div>\r\n          {/* todo: Очень важное замечание - здесь в путь прокидывается id которое потом достается с помощью params в ProfileContainer */}\r\n          <NavLink exact to={`/profile/${user.id}`}>\r\n            <img\r\n              src={user.photos.small != null ? user.photos.small : userPhoto}\r\n              className={classes.photo}\r\n              alt=\"preloader\"\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        {user.followed ? (\r\n          // Если подписан\r\n          <button\r\n            type=\"button\"\r\n            // some возвращает true либо false\r\n            disabled={followingInProgress.some(\r\n              (id) => id === user.id // вернёт true только в том случае если isFetching = true,\r\n              // isFetching передаётся при клике на подписку/отписку\r\n            )}\r\n            onClick={() => {\r\n              unFollow(user.id);\r\n            }}\r\n          >\r\n            Unfollow\r\n          </button>\r\n        ) : (\r\n          // Если не подписан\r\n          <button\r\n            type=\"button\"\r\n            disabled={followingInProgress.some((id) => id === user.id)}\r\n            onClick={() => {\r\n              follow(user.id);\r\n            }}\r\n          >\r\n            Follow\r\n          </button>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <p>{user.name}</p>\r\n        <p>user.status</p>\r\n        <p>user.location.city</p>\r\n        <p>user.location.country</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik';\r\nimport { SetQuery } from 'use-query-params';\r\nimport { Button } from 'antd';\r\nimport { FilterGetUsersT } from '../../redux/users-reducer';\r\n\r\nexport const Forms: React.FC<Props> = ({\r\n  term,\r\n  isFriends,\r\n  isFetching,\r\n  setQuery,\r\n  onFilterChanged,\r\n}) => {\r\n  const searchUsersByFilter = ({\r\n    searchUsers,\r\n    friendSelector,\r\n  }: FormikValues) => {\r\n    // при поиске c term всегда должна сбрасываться страница на первую\r\n    onFilterChanged(1, { term: searchUsers, isFriends: friendSelector });\r\n  };\r\n  const resetSearchData = (actions: FormikProps<FiledValues>) => {\r\n    onFilterChanged(1, { term: '', isFriends: 'all' });\r\n    // todo: handleReset - сбрасываем на initialValues, тоесть searchUsers = '' и friendSelector = 'all'\r\n    // actions.handleReset();\r\n    // todo: resetForm - либо прописываем вручную нужные значения\r\n    actions.resetForm({\r\n      values: {\r\n        searchUsers: '',\r\n        friendSelector: 'all',\r\n      },\r\n    });\r\n    setQuery({\r\n      page: 1,\r\n      isFriends: 'all',\r\n      term: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize // Control whether Formik should reset the form if initialValues changes\r\n      initialValues={{ searchUsers: term, friendSelector: isFriends }}\r\n      onSubmit={searchUsersByFilter}\r\n    >\r\n      {(actions) => (\r\n        <Form>\r\n          <Field type=\"text\" name=\"searchUsers\" placeholder=\"Search\" />\r\n          <Field component=\"select\" name=\"friendSelector\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"true\">Only followed</option>\r\n            <option value=\"false\">Only unfollowed</option>\r\n          </Field>\r\n          <Button htmlType=\"submit\" disabled={isFetching}>\r\n            Search\r\n          </Button>\r\n          <Button\r\n            name=\"reset\"\r\n            onClick={() => resetSearchData(actions)}\r\n            disabled={isFetching}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n// Types\r\ntype Props = {\r\n  term: FilterGetUsersT['term'];\r\n  isFriends: FilterGetUsersT['isFriends'];\r\n  isFetching: boolean;\r\n  setQuery: SetQuery<any>;\r\n  onFilterChanged: (currentPage: number, filter: FilterGetUsersT) => void;\r\n};\r\n\r\ntype FiledValues = {\r\n  searchUsers: FilterGetUsersT['term'];\r\n  friendSelector: FilterGetUsersT['isFriends'];\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NumberParam, StringParam, useQueryParams } from 'use-query-params';\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { User } from './User';\r\nimport {\r\n  FilterGetUsersT,\r\n  getUsersThunkCreator,\r\n} from '../../redux/users-reducer';\r\nimport { getTotalUsersCount, getUsers } from '../../redux/selectors';\r\nimport { Forms } from './UsersSearchForm';\r\n\r\ntype Props = {\r\n  pageSize: number;\r\n  currentPage: number;\r\n  isFetching: boolean;\r\n  filterGetUsers: FilterGetUsersT;\r\n};\r\n\r\nexport const Users: React.FC<Props> = ({\r\n  currentPage,\r\n  pageSize,\r\n  isFetching,\r\n  filterGetUsers: { isFriends, term },\r\n}) => {\r\n  // store\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const users = useSelector(getUsers);\r\n  // dispatch\r\n  const dispatch = useDispatch();\r\n  const onFilterChanged = (page: number, filter: FilterGetUsersT) => {\r\n    dispatch(getUsersThunkCreator(page, pageSize, filter));\r\n  };\r\n  const [query, setQuery] = useQueryParams({\r\n    page: NumberParam,\r\n    isFriends: StringParam,\r\n    term: StringParam,\r\n  });\r\n  useEffect(() => {\r\n    const queryTerm = query.term ? query.term : '';\r\n    const queryIsFriends = query.isFriends\r\n      ? (query.isFriends as FilterGetUsersT['isFriends'])\r\n      : 'all';\r\n    dispatch(\r\n      getUsersThunkCreator(query.page as number, pageSize, {\r\n        term: queryTerm,\r\n        isFriends: queryIsFriends,\r\n      })\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setQuery({\r\n      page: currentPage,\r\n      isFriends,\r\n      term,\r\n    });\r\n  }, [term, currentPage, isFriends, setQuery]);\r\n\r\n  return (\r\n    <div>\r\n      <Forms\r\n        setQuery={setQuery}\r\n        term={term}\r\n        isFriends={isFriends}\r\n        isFetching={isFetching}\r\n        onFilterChanged={onFilterChanged}\r\n      />\r\n      <Paginator\r\n        filter={{ term, isFriends }}\r\n        isFetching={isFetching}\r\n        currentPage={currentPage}\r\n        onChange={onFilterChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n      {users.map((user) => (\r\n        <User key={user.id} user={user} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Users } from './Users';\r\nimport Preloader from '../common/preloader/preloader';\r\nimport {\r\n  getCurrentPage,\r\n  getIsFetching,\r\n  getIsFriends,\r\n  getPageSize,\r\n  getTerm,\r\n} from '../../redux/selectors';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\n\r\nconst UsersPage = () => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  const term = useSelector(getTerm);\r\n  const isFriends = useSelector(getIsFriends);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  return (\r\n    <>\r\n      <Preloader isFetching={isFetching} />\r\n      <Users\r\n        filterGetUsers={{ term, isFriends }}\r\n        pageSize={pageSize}\r\n        currentPage={currentPage}\r\n        isFetching={isFetching}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport const UserPageAuthRedirect = withAuthRedirect(UsersPage);\r\n"],"sourceRoot":""}