{"version":3,"sources":["components/Header/Header.module.css","components/Login/Login.module.css","utils/objects-helpers.ts","api/users-api.ts","redux/users-reducer.ts","assets/img/gif-loader.svg","components/common/preloader/preloader.tsx","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/api.ts","components/common/FormsControls/FormControls.module.css","serviceWorker.js","api/auth-api.ts","api/security-apiI.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/App-reducer.ts","redux/chat-reducer.ts","redux/redux-store.ts","components/Header/AppHeader.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","redux/selectors.ts","utils/validators/validators.ts"],"names":["module","exports","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","usersAPI","getUsers","currentPage","pageSize","term","isFriends","instance","get","then","res","data","follow","id","post","unFollow","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","userId","type","getUsersThunkCreator","filter","dispatch","a","totalCount","followUnfollow","apiMethod","actionCreator","resultCode","followThunkCreator","bind","unFollowThunkCreator","usersReducer","state","action","followed","Preloader","src","preloaderImg","alt","profileAPI","status","put","photo","formData","FormData","append","headers","newProfileData","posts","message","likeCounts","profile","addPostActionCreator","newPostBody","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUsersProfileThunk","console","log","response","setStatusThunk","error","updateStatusThunk","savePhotoThunk","saveProfileThunk","getState","messages","auth","includes","fieldForError","slice","indexOf","length","toLowerCase","stopSubmit","contacts","Promise","reject","profileReducer","newPost","sendMessages","newMessage","dialogs","name","dialogsReducer","ResultCodesEnum","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserDataThunk","Success","getCaptchaUrl","url","authReducer","Login","useSelector","selectIsAuth","useDispatch","to","ReduxLoginForm","onSubmit","pass","CaptchaIsRequired","_error","catch","reduxForm","form","handleSubmit","selectCaptchaUrl","CreateField","required","Input","undefined","styles","fieldRememberMe","className","errorLogin","initialized","appReducer","chatReducer","reducers","combineReducers","profilePage","dialogsPage","usersPage","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","__store__","AppHeader","selectLogin","span","theme","mode","Item","classes","loginBlock","style","backgroundColor","icon","UserOutlined","title","onClick","SubMenu","Menu","Content","Layout","Footer","Sider","DialogsContainer","lazy","ProfileContainer","UsersPage","default","UserPageAuthRedirect","ChatPage","App","initialize","this","props","initializeApp","padding","width","defaultSelectedKeys","defaultOpenKeys","height","LaptopOutlined","minHeight","fallback","exact","from","path","render","textAlign","Component","AppContainer","withRouter","connect","ContainerApp","ReactRouterRoute","Route","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","element","touched","hasError","Textarea","input","meta","placeholder","React","createElement","validators","component","additionalText","validate","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getTerm","getIsFriends","value","requiredMaxLength","maxLength"],"mappings":"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","file":"static/js/main.abe11927.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Header_loginBlock__3P1Vz\",\"login\":\"Header_login__3Y11N\",\"title\":\"Header_title__3euRW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldRememberMe\":\"Login_fieldRememberMe__2NUZm\",\"errorLogin\":\"Login_errorLogin__1enIm\"};","export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: any,\r\n  objPropName: any,\r\n  newObjProps: any\r\n) =>\r\n  items.map((item: any) => {\r\n    if (item[objPropName] === itemId) {\r\n      return { ...item, ...newObjProps };\r\n    }\r\n    return item;\r\n  });\r\n","import { GetItemsType, ResponseType, instance } from './api';\r\nimport { FilterGetUsersT } from '../redux/users-reducer';\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage: number,\r\n    pageSize: number,\r\n    { term, isFriends }: FilterGetUsersT\r\n  ) {\r\n    // здесь обращаемся теперь к instance\r\n    return instance\r\n      .get<GetItemsType>(\r\n        `users?page=${currentPage}&count=${pageSize}&friend=${isFriends}${\r\n          term === 'all' ? '' : `&term=${term}`\r\n        }`\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  follow(id: number) {\r\n    return instance.post<ResponseType>(`follow/${id}`).then((res) => res.data);\r\n  },\r\n  unFollow(id: number) {\r\n    return instance\r\n      .delete<ResponseType>(`follow/${id}`)\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { updateObjectInArray } from '../utils/objects-helpers';\r\nimport { UserType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { usersAPI } from '../api/users-api';\r\nimport { ResponseType } from '../api/api';\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 5,\r\n  totalUsersCount: 0, // количество пользователей\r\n  currentPage: 1,\r\n  isFetching: true, // загрузка идёт если тру\r\n  followingInProgress: [] as Array<number>, // массив айдишек пользователь\r\n  term: '',\r\n  isFriends: 'all' as FilterGetUsersT['isFriends'],\r\n};\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialUsersState => {\r\n  // debugger;\r\n  switch (action.type) {\r\n    // TODO благодаря case ts показывает точное содержание экшена, то есть для каждого кейса он свой\r\n    case 'USERS/FOLLOW': {\r\n      return {\r\n        ...state,\r\n        // здесь не нужно копировать потому что map возвращает новый массив\r\n        users: updateObjectInArray(state.users, action.userId, 'id', {\r\n          followed: true,\r\n        }),\r\n      };\r\n    }\r\n    case 'USERS/UNFOLLOW': {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', {\r\n          followed: false,\r\n        }),\r\n      };\r\n    }\r\n    case 'USERS/SET_USERS': {\r\n      return { ...state, users: action.users };\r\n    }\r\n    case 'USERS/SET_CURRENT_PAGE': {\r\n      return { ...state, currentPage: action.currentPage };\r\n    }\r\n    case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n      return { ...state, totalUsersCount: action.totalUsersCount };\r\n    }\r\n    case 'USERS/TOGGLE_IS_FETCHING': {\r\n      return { ...state, isFetching: action.isFetching };\r\n    }\r\n    case 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching // если action.isFetching === true\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(\r\n              (id) => id !== action.userId // возвращает все id которые не равны пользователю на которого подписываются\r\n              // поэтому в метод some в Users вернёт false когда запрос будет выполнен\r\n            ),\r\n      };\r\n    }\r\n    case 'USERS/SET_TERM_AND_FRIENDS': {\r\n      return {\r\n        ...state,\r\n        term: action.term,\r\n        isFriends: action.isFriends,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  // обязательно ставим as const, это определяет тип точнее, то есть type: 'UNFOLLOW' будет не просто строка,\r\n  // а - именно UNFOLLOW и это не даст ошибиться в case в редьюсере и не нужно создавать под тип отдельную переменную\r\n  unFollowCreator: (userId: number) =>\r\n    ({ type: 'USERS/UNFOLLOW', userId } as const),\r\n  followCreator: (userId: number) =>\r\n    ({ type: 'USERS/FOLLOW', userId } as const),\r\n  setUsersCreator: (users: Array<UserType>) =>\r\n    ({ type: 'USERS/SET_USERS', users } as const),\r\n  setCurrentPageCreator: (currentPage: number) =>\r\n    ({ type: 'USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n  setUsersTotalCountCreator: (totalUsersCount: number) =>\r\n    ({\r\n      type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n      totalUsersCount,\r\n    } as const),\r\n  toggleIsFetchingCreator: (isFetching: boolean) =>\r\n    ({\r\n      type: 'USERS/TOGGLE_IS_FETCHING',\r\n      isFetching,\r\n    } as const),\r\n  toggleIsFollowingProgressCR: (isFetching: boolean, userId: number) =>\r\n    ({\r\n      type: 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n      isFetching,\r\n      userId,\r\n    } as const),\r\n  setTermAndFriends: (\r\n    isFriends: FilterGetUsersT['isFriends'] = 'all',\r\n    term: string\r\n  ) =>\r\n    ({\r\n      type: 'USERS/SET_TERM_AND_FRIENDS',\r\n      isFriends,\r\n      term,\r\n    } as const),\r\n};\r\n\r\n// TODO: Ниже идут создатели санок\r\n// Первая функция - создатель санки, вторая функция - это санка, в которую передаётся dispatch и прочие аргументы\r\nexport const getUsersThunkCreator =\r\n  (currentPage: number, pageSize: number, filter: FilterGetUsersT): ThunkType =>\r\n  async (dispatch) => {\r\n    // идёт выбор нужной страницы пользователей для отображения\r\n    dispatch(actions.setCurrentPageCreator(currentPage));\r\n    // если идёт загрузка то работает прелоадер, здесь мы помечаем что идёт загрузка!\r\n    dispatch(actions.toggleIsFetchingCreator(true));\r\n    // Получаем всех юзеров getUsers лежит в api\r\n    const data = await usersAPI.getUsers(currentPage, pageSize, filter);\r\n    // здесь мы помечаем что загрузка окончена\r\n    dispatch(actions.toggleIsFetchingCreator(false));\r\n    dispatch(actions.setUsersCreator(data.items));\r\n    // получаем количество страниц\r\n    dispatch(actions.setUsersTotalCountCreator(data.totalCount));\r\n    // dispatch(actions.setTerm(filter.term));\r\n    dispatch(actions.setTermAndFriends(filter.isFriends, filter.term));\r\n  };\r\n\r\n// Dispatch<ActionsType> - еще один способ типизации диспатча\r\nconst followUnfollow = async (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  userId: number,\r\n  apiMethod: (useId: number) => Promise<ResponseType>,\r\n  actionCreator: (\r\n    userId: number\r\n  ) => ReturnType<typeof actions.followCreator | typeof actions.unFollowCreator>\r\n) => {\r\n  dispatch(actions.toggleIsFollowingProgressCR(true, userId));\r\n\r\n  const data = await apiMethod(userId);\r\n\r\n  if (data.resultCode === 0) dispatch(actionCreator(userId));\r\n\r\n  dispatch(actions.toggleIsFollowingProgressCR(false, userId));\r\n};\r\n\r\nexport const followThunkCreator =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    await followUnfollow(\r\n      dispatch,\r\n      userId,\r\n      usersAPI.follow.bind(usersAPI),\r\n      actions.followCreator\r\n    );\r\n  };\r\n\r\nexport const unFollowThunkCreator =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    await followUnfollow(\r\n      dispatch,\r\n      userId,\r\n      usersAPI.unFollow.bind(usersAPI),\r\n      actions.unFollowCreator\r\n    );\r\n  };\r\n\r\n// types\r\nexport type InitialUsersState = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\nexport type FilterGetUsersT = {\r\n  term: string;\r\n  isFriends: 'all' | 'true' | 'false';\r\n};\r\n\r\nexport default usersReducer;\r\n","export default __webpack_public_path__ + \"static/media/gif-loader.1799ddc2.svg\";","import React from 'react';\r\nimport preloaderImg from '../../../assets/img/gif-loader.svg';\r\n\r\nconst Preloader: React.FC<{ isFetching?: boolean }> = ({ isFetching }) => (\r\n  <div>{isFetching ? <img src={preloaderImg} alt=\"preloader\" /> : null}</div>\r\n);\r\nexport default Preloader;\r\n","import { PhotosType, ProfileType } from '../types/types';\r\nimport { instance, ResponseType } from './api';\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType;\r\n};\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance\r\n      .get<ProfileType>(`profile/${userId}`)\r\n      .then((res) => res.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance\r\n      .get<string>(`profile/status/${userId}`)\r\n      .then((res) => res.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<ResponseType>('profile/status', { status })\r\n      .then((res) => res.data);\r\n  },\r\n  savePhoto(photo: File) {\r\n    const formData = new FormData();\r\n    formData.append('image', photo);\r\n    return instance\r\n      .put<ResponseType<SavePhotoResponseDataType>>('profile/photo', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  saveProfile(newProfileData: ProfileType) {\r\n    return instance.put('profile', newProfileData).then((res) => res.data);\r\n  },\r\n};\r\n","import { stopSubmit, FormAction } from 'redux-form';\r\nimport { PostsType, PhotosType, ProfileType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { profileAPI } from '../api/profile-api';\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi', likeCounts: 21 },\r\n    { id: 2, message: 'How a u', likeCounts: 22 },\r\n    { id: 3, message: 'Yo', likeCounts: 23 },\r\n  ] as Array<PostsType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialProfileStateType => {\r\n  // Редакс работает только с копией экземпляра объекта, поэтому мы его копируем\r\n  switch (action.type) {\r\n    case 'profile/ADD_POST': {\r\n      const newPost = {\r\n        id: state.posts.length + 1,\r\n        message: action.newPostBody,\r\n        likeCounts: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [newPost, ...state.posts] as Array<PostsType>, // Убрать as ProfileType\r\n      };\r\n    }\r\n    case 'profile/SET_USER_PROFILE': {\r\n      return { ...state, profile: action.profile };\r\n    }\r\n    case 'profile/SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n    case 'profile/DELETE_POST': {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((post) => post.id !== action.postId),\r\n      };\r\n    }\r\n    case 'profile/SAVE_PHOTO_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType, // Убрать as ProfileType\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostBody: PostsType) =>\r\n    ({\r\n      type: 'profile/ADD_POST',\r\n      newPostBody,\r\n    } as const),\r\n  setUserProfile: (profile: ProfileType) =>\r\n    ({ type: 'profile/SET_USER_PROFILE', profile } as const),\r\n  setStatus: (status: string) =>\r\n    ({ type: 'profile/SET_STATUS', status } as const),\r\n  deletePost: (postId: number) =>\r\n    ({ type: 'profile/DELETE_POST', postId } as const),\r\n  savePhotoSuccess: (photos: PhotosType) =>\r\n    ({ type: 'profile/SAVE_PHOTO_SUCCESS', photos } as const),\r\n};\r\n\r\n// thunks\r\nexport const getUsersProfileThunk =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    console.log('getUsersProfileThunk');\r\n    const response = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(response));\r\n  };\r\nexport const setStatusThunk =\r\n  (userId: number): ThunkType =>\r\n  async (dispatch) => {\r\n    try {\r\n      const response = await profileAPI.getStatus(userId);\r\n      dispatch(actions.setStatus(response));\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\nexport const updateStatusThunk =\r\n  (status: string): ThunkType =>\r\n  async (dispatch) => {\r\n    try {\r\n      const response = await profileAPI.updateStatus(status);\r\n      response.resultCode === 0 && dispatch(actions.setStatus(status));\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\nexport const savePhotoThunk =\r\n  (photo: File): ThunkType =>\r\n  async (dispatch) => {\r\n    const response = await profileAPI.savePhoto(photo);\r\n    response.resultCode === 0 &&\r\n      dispatch(actions.savePhotoSuccess(response.data.photos));\r\n  };\r\n\r\nexport const saveProfileThunk =\r\n  (newProfileData: ProfileType): ThunkType =>\r\n  async (dispatch, getState) => {\r\n    const { resultCode, messages } = await profileAPI.saveProfile(\r\n      newProfileData\r\n    );\r\n    if (resultCode === 0) {\r\n      const { userId } = getState().auth;\r\n      userId && (await dispatch(getUsersProfileThunk(userId)));\r\n      return true;\r\n    }\r\n    if (messages[0].includes('Invalid url')) {\r\n      // достаю из сообщения ошибки нужную часть строки для контактов\r\n      const fieldForError = messages[0]\r\n        .slice(messages[0].indexOf('>') + 1, messages[0].length - 1)\r\n        .toLowerCase();\r\n      dispatch(\r\n        stopSubmit('profileEdit', {\r\n          contacts: { [fieldForError]: 'Не правильный адрес контакта' },\r\n        })\r\n      );\r\n    } else {\r\n      // достаю ошибку для обязательных полей\r\n      let fieldForError = messages[0].slice(\r\n        messages[0].indexOf('(') + 1,\r\n        messages[0].length - 1\r\n      );\r\n      fieldForError = fieldForError[0].toLowerCase() + fieldForError.slice(1);\r\n      dispatch(\r\n        stopSubmit('profileEdit', { [fieldForError]: 'Обязательное поле' })\r\n      );\r\n      // реджект промиса чтобы не запускать setEditMode(false) на странице редактирования профиля\r\n    }\r\n    return Promise.reject(messages[0]);\r\n  };\r\n\r\n// types\r\nexport type InitialProfileStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n\r\nexport default profileReducer;\r\n","import { InferActionsTypes } from './redux-store';\r\n\r\nexport const actions = {\r\n  sendMessages: (newMessage: string) =>\r\n    ({ type: 'dialogs/SEND-MESSAGE', newMessage } as const),\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nlet initialState = {\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How a u' },\r\n    { id: 3, message: 'Yo' },\r\n    { id: 4, message: 'Yo' },\r\n  ] as Array<DialogsType>,\r\n  dialogs: [\r\n    { id: 1, name: 'Roman' },\r\n    { id: 2, name: 'Ilya' },\r\n    { id: 3, name: 'Anton' },\r\n    { id: 4, name: 'Andrey' },\r\n  ] as MessagesType[],\r\n};\r\n\r\nconst dialogsReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  let stateCopy;\r\n  switch (action.type) {\r\n    case 'dialogs/SEND-MESSAGE': {\r\n      const newMessage = {\r\n        id: state.messages.length + 1,\r\n        message: action.newMessage,\r\n      };\r\n      // Редакс работает только с копией экземпляра объекта, поэтому мы его копируем\r\n      stateCopy = {\r\n        ...state,\r\n        // Порядок копии имеет значение, сначала мы копируем стайт,а потом уже глубже - сообщения\r\n        // let stateCopy = {messages:[...state.messages], ...state} - не правильно, messages перезапишется и будет только ссылкой на оригинал\r\n        // Аналог пушь, через запитую в спрэд операторе указать что хочешь добавить (newMessage),также можно добавить его в начало\r\n        messages: [...state.messages, newMessage],\r\n      };\r\n      // stateCopy.messages.push(newMessage);\r\n      // stateCopy.newMessageBody = '';\r\n      return stateCopy;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// types\r\ntype DialogsType = {\r\n  id: number;\r\n  message: string;\r\n};\r\nexport type MessagesType = {\r\n  id: number;\r\n  name: string;\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n\r\nexport default dialogsReducer;\r\n","import axios from 'axios';\r\nimport { UserType } from '../types/types';\r\n\r\n// конфигурация для axios запросов чтобы всегда её не писать\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  // baseURL автомат. будет прикреплятся к началу строки\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '42365f1f-0720-4a06-bd3a-f68d51e54a78',\r\n  },\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: Array<UserType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport type ResponseType<D = object, RC = ResultCodesEnum> = {\r\n  data: D;\r\n  messages: Array<string>;\r\n  resultCode: RC;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__2z_QM\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  instance,\r\n  ResponseType,\r\n  ResultCodeForCaptcha,\r\n  ResultCodesEnum,\r\n} from './api';\r\n\r\ntype MeResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\ntype LoginResponseDataType = {\r\n  userId: number;\r\n};\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    // get<MeResponseType> - делая запрос мы ожидаем получить объект типа MeResponseType\r\n    return instance\r\n      .get<ResponseType<MeResponseDataType>>('auth/me')\r\n      .then((res) => res.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    rememberMe = false,\r\n    captcha: null | string = null\r\n  ) {\r\n    return instance.post<\r\n      ResponseType<\r\n        LoginResponseDataType,\r\n        ResultCodeForCaptcha | ResultCodesEnum\r\n      >\r\n    >('auth/login', {\r\n      email,\r\n      password,\r\n      rememberMe,\r\n      captcha,\r\n    });\r\n  },\r\n  // TODO: При зазлогине возвращаеться пустая дата\r\n  logout() {\r\n    return instance.delete<ResponseType>('auth/login');\r\n  },\r\n};\r\n","import { instance } from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string;\r\n};\r\n\r\nexport const securityAPI = {\r\n  getCaptcha() {\r\n    return instance\r\n      .get<GetCaptchaUrlResponseType>('security/get-captcha-url')\r\n      .then((data) => data);\r\n  },\r\n};\r\n","import { FormAction, stopSubmit } from 'redux-form';\r\nimport { ResultCodesEnum, ResultCodeForCaptcha } from '../api/api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-apiI';\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialAuthStateType => {\r\n  switch (action.type) {\r\n    case 'auth/SET_USER_DATA': {\r\n      return {\r\n        ...state,\r\n        // в action.data лежат userId, email, login, поэтому он их перезапишет\r\n        ...action.payload,\r\n      };\r\n    }\r\n    case 'auth/SET_CAPTCHA_URL_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  setAuthUserData: (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) =>\r\n    ({\r\n      type: 'auth/SET_USER_DATA',\r\n      payload: { userId, email, login, isAuth },\r\n    } as const),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: 'auth/SET_CAPTCHA_URL_SUCCESS',\r\n      payload: captchaUrl,\r\n    } as const),\r\n};\r\n\r\n// thunks\r\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\r\n  const {\r\n    resultCode,\r\n    data: { id, email, login },\r\n  } = await authAPI.me();\r\n  if (resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n  }\r\n  // асинхронная функции возвращает промис\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const { data } = await securityAPI.getCaptcha();\r\n  dispatch(actions.getCaptchaUrlSuccess(data.url));\r\n};\r\nexport const login =\r\n  (\r\n    email: string,\r\n    pass: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n  ): ThunkType =>\r\n  async (dispatch) => {\r\n    const { data } = await authAPI.login(email, pass, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n      dispatch(getAuthUserDataThunk());\r\n      return true;\r\n    }\r\n    if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    }\r\n    // _error создаёт параметр error который прокидывается в форму login\r\n    const message = data.messages.length > 0 ? data.messages[0] : 'Some error';\r\n    dispatch(stopSubmit('login', { _error: message }));\r\n    return Promise.reject(message);\r\n  };\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const { data } = await authAPI.logout();\r\n  if (data.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\n// types\r\nexport type InitialAuthStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\n\r\nexport default authReducer;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport {\r\n  CreateField,\r\n  GetStringKeys,\r\n  Input,\r\n} from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { login, getCaptchaUrl } from '../../redux/auth-reducer';\r\nimport styles from './Login.module.css';\r\nimport { selectCaptchaUrl, selectIsAuth } from '../../redux/selectors';\r\n\r\n// Login: React.FC<mapStatePropsType> - компонента принимает аргументы mapStatePropsType\r\nexport const Login: React.FC = () => {\r\n  const isAuth = useSelector(selectIsAuth);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    // TODO: не пойму как тут обозначить типы для Promise.reject(message)\r\n    dispatch(\r\n      login(\r\n        formData.email,\r\n        formData.password,\r\n        formData.rememberMe,\r\n        formData.captcha\r\n      ) as unknown as Promise<any>\r\n    ).catch((error) => {\r\n      // при ошибке входа спрашивает капчу\r\n      dispatch(getCaptchaUrl());\r\n      console.error(error);\r\n    });\r\n  };\r\n  if (isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      {/* onSubmit={onAddPost} - Автоматически прокидывает этот сабмит в handleSubmit(обязательно имя onSubmit) */}\r\n      <ReduxLoginForm onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({\r\n  handleSubmit,\r\n  error,\r\n  // captchaUrl\r\n}) => {\r\n  const captchaUrl = useSelector(selectCaptchaUrl);\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {CreateField<LoginFormValuesTypeKeys>('Name', 'email', [required], Input)}\r\n      {CreateField<LoginFormValuesTypeKeys>(\r\n        'Password',\r\n        'password',\r\n        [required],\r\n        Input,\r\n        {\r\n          type: 'password',\r\n        }\r\n      )}\r\n      {CreateField<LoginFormValuesTypeKeys>(\r\n        undefined,\r\n        'rememberMe',\r\n        [],\r\n        Input,\r\n        { type: 'checkbox' },\r\n        'Remember me',\r\n        styles.fieldRememberMe\r\n      )}\r\n      {captchaUrl && (\r\n        <div>\r\n          <img src={captchaUrl} alt=\"captcha\" />\r\n          {CreateField<LoginFormValuesTypeKeys>(\r\n            'Enter captcha',\r\n            'captcha',\r\n            [required],\r\n            Input\r\n          )}\r\n        </div>\r\n      )}\r\n      {error && <div className={styles.errorLogin}>{error}</div>}\r\n      <div>\r\n        <button type=\"submit\">Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType>({ form: 'login' })(\r\n  LoginForm\r\n);\r\n\r\n// Types\r\ntype LoginFormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string;\r\n};\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { getAuthUserDataThunk } from './auth-reducer';\r\nimport { AppStateType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n};\r\n\r\nconst appReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialAppStateType => {\r\n  // debugger;\r\n  switch (action.type) {\r\n    case 'app/INITIALIZED_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  initializedSuccess: () => ({ type: 'app/INITIALIZED_SUCCESS' } as const),\r\n};\r\n\r\n// thunks\r\nexport const initializeApp = (): InitializeAppType => async (dispatch) => {\r\n  await dispatch(getAuthUserDataThunk());\r\n  dispatch(actions.initializedSuccess());\r\n};\r\n\r\n// types\r\nexport type InitialAppStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype InitializeAppType = ThunkAction<\r\n  Promise<void>,\r\n  AppStateType,\r\n  any,\r\n  ActionsTypes\r\n>;\r\n\r\nexport default appReducer;\r\n","import { FormAction } from 'redux-form';\r\nimport { securityAPI } from '../api/security-apiI';\r\nimport { ChatMessageType } from '../pages/Chat/ChatPage';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  messages: [] as ChatMessageType[],\r\n};\r\n\r\nconst chatReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialAuthStateType => {\r\n  switch (action.type) {\r\n    case 'auth/SET_CAPTCHA_URL_SUCCESS': {\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: 'auth/SET_CAPTCHA_URL_SUCCESS',\r\n      payload: captchaUrl,\r\n    } as const),\r\n};\r\n\r\n// thunks\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const { data } = await securityAPI.getCaptcha();\r\n  dispatch(actions.getCaptchaUrlSuccess(data.url));\r\n};\r\n\r\n// types\r\nexport type InitialAuthStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\r\n\r\nexport default chatReducer;\r\n","import {\r\n  applyMiddleware,\r\n  combineReducers,\r\n  createStore,\r\n  compose,\r\n  Action,\r\n} from 'redux';\r\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport appReducer from './App-reducer';\r\nimport chatReducer from './chat-reducer';\r\n\r\nconst reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers; // (globalstate: AppStateType) => AppStateType - это тип функции\r\nexport type AppStateType = ReturnType<RootReducerType>; // возвращает из функции тип всего стэйта\r\n\r\n// TODO: универсальное определение типов экшинов\r\nexport type InferActionsTypes<T> = T extends {\r\n  [key: string]: (...args: Array<any>) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\n// TODO: универсальная типизация санок\r\n// ThunkAction - очень крутая типизация ts если используется getState и санка что-то возвращает + extraArgument(пока не знаю что это)\r\nexport type BaseThunkType<\r\n  A extends Action,\r\n  R = Promise<void | true>\r\n> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// TODO: подключение расширение редакс для браузера\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleWare))\r\n);\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\n// eslint-disable-next-line no-underscore-dangle\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Avatar, Button, Col, Menu, Row } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Header } from 'antd/es/layout/layout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport classes from './Header.module.css';\r\nimport { selectIsAuth, selectLogin } from '../../redux/selectors';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nexport const AppHeader: React.FC = () => {\r\n  const login = useSelector(selectLogin);\r\n  const isAuth = useSelector(selectIsAuth);\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <Header className=\"header\">\r\n      <Row>\r\n        <Col span={20}>\r\n          <Menu theme=\"dark\" mode=\"horizontal\">\r\n            <Menu.Item key=\"1\">\r\n              <Link to=\"/users\">Users</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Col>\r\n        <Col span={4} className={classes.loginBlock}>\r\n          {isAuth ? (\r\n            <div className={classes.login}>\r\n              <Avatar\r\n                alt={login || ''}\r\n                style={{ backgroundColor: '#87d068' }}\r\n                icon={<UserOutlined />}\r\n              />\r\n              <div className={classes.title}>{login}</div>\r\n              <Button type=\"primary\" onClick={onLogout}>\r\n                Log out\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <Button>\r\n              <Link to=\"/login\">Login</Link>\r\n            </Button>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\n","import React, { Component, ComponentType, FC, lazy, Suspense } from 'react';\r\nimport './App.css';\r\nimport { connect, Provider } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport {\r\n  HashRouter,\r\n  Link,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n  withRouter,\r\n} from 'react-router-dom';\r\nimport { QueryParamProvider } from 'use-query-params';\r\nimport { Layout, Menu } from 'antd';\r\nimport { LaptopOutlined, UserOutlined } from '@ant-design/icons';\r\n\r\nimport { Login } from './components/Login/Login';\r\nimport { initializeApp } from './redux/App-reducer';\r\nimport Preloader from './components/common/preloader/preloader';\r\nimport store, { AppStateType } from './redux/redux-store';\r\nimport { AppHeader } from './components/Header/AppHeader';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = lazy(\r\n  () => import('./components/Dialogs/DialogsContainer')\r\n);\r\nconst ProfileContainer = lazy(\r\n  () => import('./components/Profile/ProfileContainer')\r\n);\r\nconst UsersPage = lazy(() =>\r\n  import('./components/Users/UsersPage').then(({ UserPageAuthRedirect }) => ({\r\n    default: UserPageAuthRedirect,\r\n  }))\r\n);\r\nconst ChatPage = lazy(() =>\r\n  import('./pages/Chat/ChatPage').then((module) => ({\r\n    default: module.ChatPage,\r\n  }))\r\n);\r\n\r\n// App - компонента, возвращающая jsx. В validators.ts обозначается как тег <App />\r\nclass App extends Component<PropsType & DispatchPropsType> {\r\n  componentDidMount() {\r\n    const { initializeApp: initialize } = this.props;\r\n    initialize();\r\n    // window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  // componentWillUnmount() {\r\n  //   window.removeEventListener(\r\n  //     'unhandledrejection',\r\n  //     this.catchAllUnhandledErrors\r\n  //   );\r\n  // }\r\n\r\n  // catchAllUnhandledErrors = () => {\r\n  //   alert('Some error occurred');\r\n  // };\r\n\r\n  render() {\r\n    const { initialized } = this.props;\r\n    if (!initialized) return <Preloader />;\r\n    return (\r\n      <Layout>\r\n        <AppHeader />\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Layout\r\n            className=\"site-layout-background\"\r\n            style={{ padding: '24px 0' }}\r\n          >\r\n            <Sider className=\"site-layout-background\" width={200}>\r\n              <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['1']}\r\n                defaultOpenKeys={['sub1']}\r\n                style={{ height: '100%' }}\r\n              >\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\r\n                  <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"2\">\r\n                    <Link to=\"/dialogs\">Messages</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu\r\n                  key=\"sub2\"\r\n                  icon={<LaptopOutlined />}\r\n                  title=\"Developers\"\r\n                >\r\n                  <Menu.Item key=\"3\">\r\n                    <Link to=\"/users\">Users</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"4\">\r\n                    <Link to=\"/chat\">Chat</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              </Menu>\r\n            </Sider>\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                {/* Route следит за изменением пути, switch указывает точный путь */}\r\n                <Switch>\r\n                  <Redirect exact from=\"/\" to=\"/profile\" />\r\n                  <Route\r\n                    // указывает userId(можно назвать как хочешь) что бы в params вытащить id\r\n                    exact\r\n                    path=\"/profile/:userId?\"\r\n                    render={() => <ProfileContainer />}\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path=\"/dialogs\"\r\n                    render={() => <DialogsContainer />}\r\n                  />\r\n                  <Route exact path=\"/users\" render={() => <UsersPage />} />\r\n                  <Route exact path=\"/login\" render={() => <Login />} />\r\n                  <Route exact path=\"/chat\" render={() => <ChatPage />} />\r\n                  <Route\r\n                    exact\r\n                    path=\"*\"\r\n                    render={() => <div>404 NOT FOUND</div>}\r\n                  />\r\n                </Switch>\r\n              </Suspense>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>\r\n          Ant Design ©2018 Created by Ant UED\r\n        </Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\n// контейнер\r\nconst AppContainer = compose<FC | ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp })\r\n)(App);\r\n\r\n// еще контейнер для подключение стора, перенесено в этот файл чтобы сработал тест App.text.js\r\nconst ContainerApp: React.FC = () => (\r\n  // <BrowserRouter> - используется с Route\r\n  <HashRouter>\r\n    <QueryParamProvider ReactRouterRoute={Route}>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </QueryParamProvider>\r\n  </HashRouter>\r\n);\r\n\r\nexport default ContainerApp;\r\n\r\n// types\r\ntype PropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Field, WrappedFieldProps } from 'redux-form';\r\nimport styles from './FormControls.module.css';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\n// Types\r\ntype FormControlPropsTypes = {\r\n  touched: boolean;\r\n  error?: any;\r\n  element: React.ReactNode;\r\n};\r\ntype FormAdditionalTypes = {\r\n  placeholder: string | undefined;\r\n  type: 'password' | 'checkbox';\r\n};\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;\r\n\r\nconst FormControl: React.FC<FormControlPropsTypes> = ({\r\n  element,\r\n  touched,\r\n  error,\r\n}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={hasError ? styles.error : ''}>\r\n      {element}\r\n      {hasError && <div>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps & FormAdditionalTypes> = ({\r\n  input,\r\n  meta,\r\n  placeholder,\r\n  type,\r\n}) => {\r\n  const element = React.createElement('textarea', {\r\n    ...input,\r\n    placeholder,\r\n    type,\r\n  });\r\n  return <FormControl {...meta} element={element} />;\r\n};\r\nexport const Input: React.FC<WrappedFieldProps & FormAdditionalTypes> = ({\r\n  input,\r\n  meta,\r\n  placeholder,\r\n  type,\r\n}) => {\r\n  const element = React.createElement('input', { ...input, placeholder, type });\r\n  return <FormControl {...meta} element={element} />;\r\n};\r\n\r\n// в FormKeysType могут попасть только определенные типы только строк\r\nexport function CreateField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps & FormAdditionalTypes>,\r\n  // сложная типизации component, прокидываю вручную тип для placeholder и type, потому что это мной выдуманные пропсы а не стандарнтные\r\n  props = { type: 'text' },\r\n  additionalText?: string,\r\n  className?: string\r\n) {\r\n  return (\r\n    <div className={className}>\r\n      <Field\r\n        name={name}\r\n        placeholder={placeholder}\r\n        component={component}\r\n        validate={validators}\r\n        {...props}\r\n      />\r\n      {additionalText && <span>{additionalText}</span>}\r\n    </div>\r\n  );\r\n}\r\n","import { AppStateType } from './redux-store';\r\n\r\n// userPage\r\nexport const getUsers = ({ usersPage }: AppStateType) => usersPage.users;\r\nexport const getPageSize = ({ usersPage }: AppStateType) => usersPage.pageSize;\r\nexport const getTotalUsersCount = ({ usersPage }: AppStateType) =>\r\n  usersPage.totalUsersCount;\r\nexport const getCurrentPage = ({ usersPage }: AppStateType) =>\r\n  usersPage.currentPage;\r\nexport const getIsFetching = ({ usersPage }: AppStateType) =>\r\n  usersPage.isFetching;\r\nexport const getFollowingInProgress = ({ usersPage }: AppStateType) =>\r\n  usersPage.followingInProgress;\r\nexport const getTerm = ({ usersPage }: AppStateType) => usersPage.term;\r\nexport const getIsFriends = ({ usersPage }: AppStateType) =>\r\n  usersPage.isFriends;\r\n\r\n// auth\r\nexport const selectCaptchaUrl = ({ auth }: AppStateType) => auth.captchaUrl;\r\nexport const selectIsAuth = ({ auth }: AppStateType) => auth.isAuth;\r\nexport const selectLogin = ({ auth }: AppStateType) => auth.login;\r\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const requiredMaxLength =\r\n  (maxLength: number): FieldValidatorType =>\r\n  (value) => {\r\n    if (value && value.length > maxLength) {\r\n      return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n  };\r\n"],"sourceRoot":""}