{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","module","exports","DialogItem","id","name","path","exact","className","classes","dialog","activeClassName","active","Message","message","maxLength","requiredMaxLength","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","CreateField","required","Textarea","type","Dialogs","dialogsPage","sendMessages","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","value","newMessageBody","compose","actions"],"mappings":"kHAAA,kEAKMA,EAA6B,SAACC,GAAD,MAA0B,CAC3DC,OAAQD,EAAME,KAAKD,SAGd,SAASE,EACdC,GAMA,OAAOC,YACLN,EADKM,EAJmB,SAAC,GACzB,OAD6D,EAAlCJ,OAEpB,cAACG,EAAD,IADa,cAAC,IAAD,CAAUE,GAAG,gB,oBCZrCC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,OAAS,wBAAwB,OAAS,0B,oHCqBlKC,EAjB4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC1CC,EAAI,mBAAeF,GACzB,OACE,8BAEE,cAAC,IAAD,CACEG,OAAK,EACLC,UAAWC,IAAQC,OACnBV,GAAIM,EACJK,gBAAiBF,IAAQG,OAJ3B,SAMGP,OCVMQ,EAJgC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAC7C,8BAAMA,K,gBCMFC,EAAYC,YAAkB,IA6C9BC,EAAsBC,YAA8B,CACxDC,KAAM,wBADoBD,EAlB4C,SAAC,GAAD,IACtEE,EADsE,EACtEA,aADsE,OAGtE,uBAAMC,SAAUD,EAAhB,UACE,8BACGE,YACC,oGACA,iBACA,CAACC,IAAUR,GACXS,OAGJ,8BACE,wBAAQC,KAAK,SAAb,4EASSC,EA/CyB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChDC,EAAkBF,EAAYG,QAAQC,KAAI,SAACC,GAAD,OAC9C,cAAC,EAAD,CAAY3B,KAAM2B,EAAE3B,KAAiBD,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAE7B6B,EAAmBN,EAAYO,SAASH,KAAI,SAACI,GAAD,OAChD,cAAC,EAAD,CAASrB,QAASqB,EAAErB,SAAcqB,EAAE/B,OAMtC,OACE,sBAAKI,UAAWC,IAAQqB,QAAxB,UACE,qBAAKtB,UAAWC,IAAQ2B,aAAxB,SAAuCP,IACvC,sBAAKrB,UAAWC,IAAQyB,SAAxB,UACE,8BAAMD,IACN,8BAEE,cAAChB,EAAD,CAAqBI,SAVF,SAACgB,GAC1BT,EAAaS,EAAMC,4B,kBCPRC,sBACb1C,IACAE,aANsB,SAACL,GAAD,MAA0B,CAChDiC,YAAajC,EAAMiC,eAKZ,eAAuBa,MAFjBD,CAGbb","file":"static/js/7.c80af60b.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { AppStateType } from '../../redux/redux-store';\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function withAuthRedirect(\n  WrappedComponent: React.FC | React.ComponentType\n) {\n  const RedirectComponent = ({ isAuth }: MapStateToPropsType) => {\n    if (!isAuth) return <Redirect to=\"/login\" />;\n    return <WrappedComponent />;\n  };\n  return connect<MapStateToPropsType, object, object, AppStateType>(\n    mapStateToPropsForRedirect\n  )(RedirectComponent);\n}\n\n// types\ninterface MapStateToPropsType {\n  isAuth: boolean;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__39R0H\",\"dialogsItems\":\"Dialogs_dialogsItems__3miLS\",\"messages\":\"Dialogs_messages__3wmSp\",\"active\":\"Dialogs_active__3FpjA\",\"dialog\":\"Dialogs_dialog__31Xuh\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from '../Dialogs.module.css';\nimport { MessagesType } from '../../../redux/dialogs-reducer';\n\nconst DialogItem: React.FC<MessagesType> = ({ id, name }) => {\n  const path = `/dialogs/${id}`;\n  return (\n    <div>\n      {/* to(для) - для такого-то пути применяем  - activeClassName  */}\n      <NavLink\n        exact\n        className={classes.dialog}\n        to={path}\n        activeClassName={classes.active}\n      >\n        {name}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from 'react';\n\nconst Message: React.FC<{ message: string }> = ({ message }) => (\n  <div>{message}</div>\n);\n\nexport default Message;\n","import React from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport classes from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { CreateField, Textarea } from '../common/FormsControls/FormsControls';\nimport { required, requiredMaxLength } from '../../utils/validators/validators';\nimport { InitialStateType } from '../../redux/dialogs-reducer';\n\nconst maxLength = requiredMaxLength(30);\n\nconst Dialogs: React.FC<OwmPropsType> = ({ dialogsPage, sendMessages }) => {\n  const dialogsElements = dialogsPage.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ));\n  const messagesElements = dialogsPage.messages.map((m) => (\n    <Message message={m.message} key={m.id} />\n  ));\n\n  const onSendMessageClick = (value: NewMessageFormType) => {\n    sendMessages(value.newMessageBody);\n  };\n  return (\n    <div className={classes.dialogs}>\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\n      <div className={classes.messages}>\n        <div>{messagesElements}</div>\n        <div>\n          {/* onSubmit={onAddPost} - автоматически прокидывает этот сабмит в handleSubmit(обязательно имя onSubmit) */}\n          <AddMessageFormRedux onSubmit={onSendMessageClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType>> = ({\n  handleSubmit,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <div>\n      {CreateField<keyof NewMessageFormType>(\n        'Введите сообщение',\n        'newMessageBody',\n        [required, maxLength],\n        Textarea\n      )}\n    </div>\n    <div>\n      <button type=\"submit\">Отправить</button>\n    </div>\n  </form>\n);\n\nconst AddMessageFormRedux = reduxForm<NewMessageFormType>({\n  form: 'dialogAddMessageForm',\n})(AddMessageForm);\n\nexport default Dialogs;\n\n// types\ntype OwmPropsType = {\n  dialogsPage: InitialStateType;\n  sendMessages: (newMessageBody: string) => void;\n};\ntype NewMessageFormType = {\n  newMessageBody: string;\n};\n","import { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { ComponentType, FC } from 'react';\nimport Dialogs from './Dialogs';\nimport { actions } from '../../redux/dialogs-reducer';\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\nimport { AppStateType } from '../../redux/redux-store';\n\n// Передаём часть state для DialogsContainer\nconst mapStateToProps = (state: AppStateType) => ({\n  dialogsPage: state.dialogsPage,\n});\n\nexport default compose<FC | ComponentType>(\n  withAuthRedirect, // hoc для ридеректа\n  connect(mapStateToProps, { ...actions })\n)(Dialogs);\n"],"sourceRoot":""}